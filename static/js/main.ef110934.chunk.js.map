{"version":3,"sources":["logo.svg","components/datecomp.js","components/header.js","components/footer.js","lib/server.js","components/loading.js","components/allholidays.js","components/country.js","lib/countries.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DateComp","react_default","a","createElement","className","type","id","onChange","this","props","updateOnDateChange","React","Component","Header","Footer","Request","country","arguments","length","undefined","month","day","endpoint","concat","fetch","method","mode","then","response","console","log","status","json","Promise","reject","bind","Loading","src","AllHolidays","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","holidayDiv","listOfHolidays","holidays","loading_Loading","constructor","Array","list","map","el","date","name","Country","countries","selectCountries","codes","i","value","names","selected","getCountriesList","split","App","_this","state","assertThisInitialized","header_Header","country_Country","datecomp_DateComp","allholidays_AllHolidays","footer_Footer","e","_this2","setState","document","getElementById","selectEl","options","selectedIndex","substring","jsonResp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef110934.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n//date input\r\n//when date is selected, the updateOnDateChange method is triggered\r\nexport default class DateComp extends React.Component{\r\n\trender(){\t\t\r\n\t\treturn (<div><div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-lg-4 col-md-4\"></div>\r\n\t\t\t\t\t<div className=\"col-lg-4 col-md-4\">\r\n\t\t\t\t\t\t<p>Select a date</p>\r\n\t\t\t\t\t</div>\t\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-lg-4 col-md-4\"></div>\r\n\t\t\t\t\t<div className=\"col-lg-4 col-md-4\">\r\n\t\t\t\t\t\t<input className=\"calendar\" type=\"date\" id=\"date\" onChange={this.props.updateOnDateChange}/>\r\n\t\t\t\t\t</div>\t\r\n\t\t\t\t</div></div>);\r\n\t}\r\n}\r\n","import React from 'react';\r\n\r\n//purelly cosmetic component. Only displaces the header of the page, doesn't have any other functionallity\r\nexport default class Header extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<header>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1>toDate</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"line\"></div>\r\n\t\t\t</header>\r\n\t\t\t);\r\n\t}\r\n}","import React from 'react';\r\n\r\n//purelly cosmetic component. Only displaces the footer of the page, doesn't have any other functionallity\r\nexport default class Footer extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<footer>\r\n\t\t\t<p className=\"floatRight\"> Photo by George Dolgikh from Pexels</p>\t\t\t\t\r\n\t\t\t</footer>\r\n\t\t\t);\r\n\t}\r\n}","//function for retriving events by date\r\nexport const Request = {\r\n\t\trequestByDate : function(country = \"US\", month = \"01\", day = \"01\") {\r\n\t\t\tconst endpoint = `https://cors-anywhere.herokuapp.com/http://api.holid.co/v1/${country}/${day}/${month}`;\r\n\t\t \treturn fetch(endpoint, \r\n\t\t \t\t{\r\n\t\t \t\t\t/**/\r\n\t\t \t\t\t\"method\":\"GET\",\r\n\t\t \t\t\t\"mode\":\"cors\"}).then((response) => {\r\n\t\t\t\t\t\tconsole.log(response.status);\r\n\t\t\t\t\t\tlet json = response.json();\r\n\t\t\t\t\t \tif (response.status >= 200 && response.status < 300) {\r\n\t\t\t\t\t \t\t\tconsole.log(`events ${json}`);\r\n\t\t\t\t\t\t    \treturn json;\r\n\t\t\t\t\t\t  } else {\r\n\t\t\t\t\t\t    \treturn json.then(Promise.reject.bind(Promise));\r\n\t\t\t\t\t\t  }\t\t\t\t\r\n\t\t\t});\r\n\t}\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default class Loading extends React.Component{\r\n\trender(){\r\n\t\treturn (<div>\r\n\t\t\t\t\t<img src=\"./loading.gif\"/>\r\n\t\t\t\t</div>);\r\n\t}\r\n}","import React from 'react';\r\nimport Loading from './loading';\r\n\r\nexport default class AllHolidays extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\t\t\r\n\t}\r\n\trender(){\r\n\t\tlet holidayDiv;\r\n\t\tlet listOfHolidays = this.props.holidays;\r\n\t\tif(listOfHolidays == \"loading\"){\r\n\t\t\treturn <Loading/>;\r\n\t\t} else if(listOfHolidays.constructor === Array){\r\n\t\t\tif(listOfHolidays.length == 0){\r\n\t\t\t\t\tholidayDiv = <div>\r\n\t\t\t\t\t<p>No holidays, sorry</p>\r\n\t\t\t\t</div>;\r\n\t\t\t\t} else {\r\n\t\t\t\tlet list = listOfHolidays.map((el) => {\r\n\t\t\t\t\treturn <div>\r\n\t\t\t\t\t\t\t\t<p>Date : {el.date} </p>\r\n\t\t\t\t\t\t\t\t<p>Name : {el.name}</p>\r\n\t\t\t\t\t\t\t</div>;\r\n\t\t\t\t\t\t});\r\n\t\t\t\tholidayDiv = (<div>\r\n\t\t\t\t\t{list}\r\n\t\t\t\t</div>);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif(listOfHolidays.date === undefined)\r\n\t\t\t{\r\n\t\t\t\tholidayDiv = <div>\r\n\t\t\t\t\t<p>No holidays, sorry</p>\r\n\t\t\t\t</div>;\r\n\t\t\t} else {\r\n\t\t\t\tholidayDiv = <div>\r\n\t\t\t\t<p>Date : {listOfHolidays.date} </p>\r\n\t\t\t\t<p>Name : {listOfHolidays.name}</p>\r\n\t\t\t\t</div>;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\treturn (<div className=\"row\">\t\r\n\t\t\t\t\t<div className=\"col-lg-4 col-md-4\"></div>\r\n\t\t\t\t\t<div className=\"holidayList col-lg-4 col-md-4\">{holidayDiv}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t}\r\n}\r\n\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport default class Country extends React.Component{\r\n\trender(){\r\n\t\tconst countries = this.props.countries;\r\n\t\tconst selectCountries = countries.codes.map((el, i) => {\r\n\t\t\tif(countries.codes[i] != \"US\"){\r\n\t\t\t\treturn (<option value={countries.codes[i]}>{countries.names[i]}</option>);\t\t\r\n\t\t\t} else {\r\n\t\t\t\treturn (<option value={countries.codes[i]} selected=\"selected\">{countries.names[i]}</option>);\r\n\t\t\t}\r\n\t\t\r\n\t\t});\r\n\t\treturn (<select id=\"countryId\"> {selectCountries}</select>);\t\t\t\t\t\r\n\t}\r\n\r\n};\r\n\r\n","const c_codesStr = \"AO,AT,AU,AW,AX,BA,BE,BG,BO,BR,BS,CA,CH,CN,CO,CR,CU,CZ,DE,DK,DO,EC,ES,FI,FR,FR-A,GB,GB-ENG,GB-NIR,GB-SCT,GB-WLS,GH,GR,GT,HK,HN,HR,HU,ID,IE,IN,IL,IS,IT,JP,KZ,LS,LT,LU,MG,MQ,MT,MU,MX,MZ,NG,NL,NO,NZ,NZ-AUK,NZ-BOP,NZ-CAN,NZ-GIS,NZ-HKB,NZ-MBH,NZ-MWT,NZ-NSN,NZ-NTL,NZ-OTA,NZ-STL,NZ-TAS,NZ-TKI,NZ-WGN,NZ-WKO,NZ-WTC,PE,PK,PH,PL,PR,PT,PY,RE,RO,RU,SC,SE,SG,SI,SK,SL,ST,TN,TR,UA,US,UY,VE,ZA,ZW\";\r\nconst c_namesStr = \"Angola,Austria,Australia,Aruba,Åland Islands,Bosnia and Herzegovina,Belgium,Bulgaria,Bolivia,Brazil,The Bahamas,Canada,Switzerland,China,Colombia,Costa Rica,Cuba,Czech Republic,Germany,Denmark,Dominican Republic,Ecuador,Spain,Finland,France,Alsace,United Kingdom,England,Northern Ireland,Scotland,Wales,Ghana,Greece,Guatemala,Hong Kong,Honduras,Croatia,Hungary,Indonesia,Ireland,India,Israel,Iceland,Italy,Japan,Kazakhstan,Lesotho,Lithuania,Luxembourg,Madagascar,Martinique,Malta,Mauritius,Mexico,Mozambique,Nigeria,Netherlands,Norway,New Zealand,Auckland,Bay of Plenty,Canterbury,Gisborne,Hawkes Bay,Marlborough,Manawatu-Wanganui,Nelson,Northland,Otago,Southland,Tasman,Taranaki,Wellington,Waikato,West Coast,Peru,Pakistan,Philippines,Poland,Puerto Rico,Portugal,Paraguay,Réunion,Romania,Russia,Seychelles,Sweden,Singapore,Slovenia,Slovakia,Sierra Leone,Sao Tome and Principe,Tunisia,Turkey,Ukraine,United States,Uruguay,Venezuela,South Africa,Zimbabwe\";\r\n\r\n\r\nexport const getCountriesList = function(){\r\n\tlet countries = {\r\n\t\tnames : c_namesStr.split(\",\"),\r\n\t\tcodes : c_codesStr.split(\",\")\r\n\t};\t\r\n\r\n\treturn countries;\r\n\r\n};\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport DateComp from './components/datecomp';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport {Request} from './lib/server';\nimport AllHolidays from './components/allholidays';\nimport Country from './components/country';\nimport {getCountriesList} from './lib/countries';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      \"holidays\" : {},\n      \"countries\" : getCountriesList()\n    };\n    this.updateOnDateChange = this.updateOnDateChange.bind(this);\n    \n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>        \n        <div className=\"mainBody\">\n          <Country updateOnDateChange={this.updateOnDateChange} countries={this.state.countries}/>\n          <DateComp updateOnDateChange={this.updateOnDateChange} date={this.state.date}/>\n          <AllHolidays holidays={this.state.holidays}/>\n        </div>\n      <Footer/>\n      </div>\n    );\n  }\n  //listener to fetch holidays when the date is changed\n  updateOnDateChange(e){\n    this.setState({\"holidays\" : \"loading\"});\n    let date = document.getElementById('date').value;    \n    let selectEl = document.getElementById('countryId');   \n    let country = selectEl.options[selectEl.selectedIndex].value\n    Request.requestByDate(country, date.substring(5,7), date.substring(8,10)).then(jsonResp => {\n          /*console.log(`jsonResp ${JSON.stringify(jsonResp[\"holidays\"])}`);*/\n          this.setState({\"holidays\" : jsonResp[\"holidays\"]});\n          return jsonResp[\"holidays\"];\n      });\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}